{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An RestFUL API-driven Provisioner and DHCP server",
    "title": "DigitalRebar Provision Server",
    "termsOfService": "There are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Greg Althaus",
      "url": "http://rackn.com",
      "email": "greg@rackn.com"
    },
    "license": {
      "name": "APL",
      "url": "https://raw.githubusercontent.com/digitalrebar/digitalrebar/master/LICENSE.md"
    },
    "version": "0.1.0"
  },
  "basePath": "/api/v3",
  "paths": {
    "/bootenvs": {
      "get": {
        "description": "This will show all BootEnvs by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nOnlyUnknown = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Lists BootEnvs filtered by some parameters.",
        "operationId": "listBootEnvs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "OnlyUnknown",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BootEnvsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a BootEnv from the provided object",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Create a BootEnv",
        "operationId": "createBootEnv",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BootEnv"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/BootEnvResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nOnlyUnknown = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Stats of the List BootEnvs filtered by some parameters.",
        "operationId": "listStatsBootEnvs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "OnlyUnknown",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/bootenvs/{name}": {
      "get": {
        "description": "Get the BootEnv specified by {name} or return NotFound.",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Get a BootEnv",
        "operationId": "getBootEnv",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BootEnvResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a BootEnv specified by {name} using a JSON BootEnv",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Put a BootEnv",
        "operationId": "putBootEnv",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BootEnv"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BootEnvResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a BootEnv specified by {name}",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Delete a BootEnv",
        "operationId": "deleteBootEnv",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BootEnvResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the BootEnv specifiec by {name} exists, or return NotFound.",
        "tags": [
          "BootEnvs"
        ],
        "summary": "See if a BootEnv exists",
        "operationId": "headBootEnv",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a BootEnv specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Patch a BootEnv",
        "operationId": "patchBootEnv",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BootEnvResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/bootenvs/{name}/actions": {
      "get": {
        "description": "List BootEnv actions for a BootEnv specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "BootEnvs"
        ],
        "summary": "List bootenv actions BootEnv",
        "operationId": "getBootEnvActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/bootenvs/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a BootEnv specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "BootEnvs"
        ],
        "summary": "List specific action for a bootenv BootEnv",
        "operationId": "getBootEnvAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "BootEnvs"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postBootEnvAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/contents": {
      "get": {
        "description": "Lists possible contents on the system to serve DHCP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Contents"
        ],
        "operationId": "listContents",
        "responses": {
          "200": {
            "$ref": "#/responses/ContentsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create content into Digital Rebar Provision",
        "tags": [
          "Contents"
        ],
        "operationId": "createContent",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ContentSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          },
          "507": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/contents/{name}": {
      "get": {
        "description": "Get a specific content specified by {name}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Contents"
        ],
        "summary": "Get a specific content with {name}",
        "operationId": "getContent",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Replace content in Digital Rebar Provision",
        "tags": [
          "Contents"
        ],
        "operationId": "uploadContent",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ContentSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          },
          "507": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Contents"
        ],
        "summary": "Delete a content set.",
        "operationId": "deleteContent",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/events": {
      "post": {
        "description": "Create an Event from the provided object",
        "tags": [
          "Events"
        ],
        "summary": "Create an Event",
        "operationId": "postEvent",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/files": {
      "get": {
        "description": "Lists the files in a directory under /files.  path=\u003cpath to return\u003e\nPath defaults to /",
        "tags": [
          "Files"
        ],
        "summary": "Lists files in files directory or subdirectory per query parameter",
        "operationId": "listFiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FilesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/files/{path}": {
      "get": {
        "description": "Get a specific file specified by {path} under files.",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "tags": [
          "Files"
        ],
        "summary": "Get a specific File with {path}",
        "operationId": "getFile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Explode",
            "description": "in: explode",
            "name": "explode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FileResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "The file will be uploaded to the {path} in /files.  The {path} will be created.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Files"
        ],
        "summary": "Upload a file to a specific {path} in the tree under files.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Explode",
            "description": "in: explode",
            "name": "explode",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/FileInfoResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "507": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "The file will be removed from the {path} in /files.",
        "tags": [
          "Files"
        ],
        "summary": "Delete a file to a specific {path} in the tree under files.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Explode",
            "description": "in: explode",
            "name": "explode",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the file specified by {path} exists, or return NotFound.",
        "tags": [
          "Files"
        ],
        "summary": "See if a file exists and return a checksum in the header",
        "operationId": "headFile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Explode",
            "description": "in: explode",
            "name": "explode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "description": "List all static indexes for objects",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Indexes"
        ],
        "operationId": "listIndexes",
        "responses": {
          "200": {
            "$ref": "#/responses/IndexesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/indexes/{prefix}": {
      "get": {
        "description": "Get static indexes for a specific object type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Indexes"
        ],
        "operationId": "getIndex",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IndexResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/indexes/{prefix}/{param}": {
      "get": {
        "description": "Unlike the other routes, you can probe for parameter-defined\nindexes using this route.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Indexes"
        ],
        "summary": "Get information on a specific index for a specific object type.",
        "operationId": "getSingleIndex",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Prefix",
            "name": "prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Param",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IndexResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Return current system info.",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/InfoResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/interfaces": {
      "get": {
        "description": "Lists possible interfaces on the system to serve DHCP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Interfaces"
        ],
        "operationId": "listInterfaces",
        "responses": {
          "200": {
            "$ref": "#/responses/InterfacesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/interfaces/{name}": {
      "get": {
        "description": "Get a specific interface specified by {name}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Interfaces"
        ],
        "summary": "Get a specific interface with {name}",
        "operationId": "getInterface",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/InterfaceResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/isos": {
      "get": {
        "description": "Lists the isos in a directory under /isos.",
        "tags": [
          "Isos"
        ],
        "summary": "Lists isos in isos directory",
        "operationId": "listIsos",
        "responses": {
          "200": {
            "$ref": "#/responses/IsosResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/isos/{path}": {
      "get": {
        "description": "Get a specific iso specified by {path} under isos.",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "tags": [
          "Isos"
        ],
        "summary": "Get a specific Iso with {path}",
        "operationId": "getIso",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IsoResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "The iso will be uploaded to the {path} in /isos.  The {path} will be created.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Isos"
        ],
        "summary": "Upload an iso to a specific {path} in the tree under isos.",
        "operationId": "uploadIso",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/IsoInfoResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "507": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "The iso will be removed from the {path} in /isos.",
        "tags": [
          "Isos"
        ],
        "summary": "Delete an iso to a specific {path} in the tree under isos.",
        "operationId": "deleteIso",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the iso specified by {path} exists, or return NotFound.",
        "tags": [
          "Files"
        ],
        "summary": "See if a iso exists and return a checksum in the header",
        "operationId": "headIso",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "description": "This will show all Jobs by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = string\nStage = string\nTask = string\nState = string\nMachine = string\nArchived = boolean\nStartTime = datetime\nEndTime = datetime\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nUuid=fred - returns items named fred\nUuid=Lt(fred) - returns items that alphabetically less than fred.\nUuid=Lt(fred)\u0026Archived=true - returns items with Uuid less than fred and Archived is true",
        "tags": [
          "Jobs"
        ],
        "summary": "Lists Jobs filtered by some parameters.",
        "operationId": "listJobs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Uuid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Stage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Task",
            "in": "query"
          },
          {
            "type": "string",
            "name": "State",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Machine",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Archived",
            "in": "query"
          },
          {
            "type": "string",
            "name": "StartTime",
            "in": "query"
          },
          {
            "type": "string",
            "name": "EndTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Job from the provided object, Only Machine and UUID are used.",
        "tags": [
          "Jobs"
        ],
        "summary": "Create a Job",
        "operationId": "createJob",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/JobResponse"
          },
          "202": {
            "$ref": "#/responses/JobResponse"
          },
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = string\nStage = string\nTask = string\nState = string\nMachine = string\nArchived = boolean\nStartTime = datetime\nEndTime = datetime\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nUuid=fred - returns items named fred\nUuid=Lt(fred) - returns items that alphabetically less than fred.\nUuid=Lt(fred)\u0026Archived=true - returns items with Uuid less than fred and Archived is true",
        "tags": [
          "Jobs"
        ],
        "summary": "Stats of the List Jobs filtered by some parameters.",
        "operationId": "listStatsJobs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Uuid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Stage",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Task",
            "in": "query"
          },
          {
            "type": "string",
            "name": "State",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Machine",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Archived",
            "in": "query"
          },
          {
            "type": "string",
            "name": "StartTime",
            "in": "query"
          },
          {
            "type": "string",
            "name": "EndTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/jobs/{uuid}": {
      "get": {
        "description": "Get the Job specified by {uuid} or return NotFound.",
        "tags": [
          "Jobs"
        ],
        "summary": "Get a Job",
        "operationId": "getJob",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Job specified by {uuid} using a JSON Job",
        "tags": [
          "Jobs"
        ],
        "summary": "Put a Job",
        "operationId": "putJob",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Job specified by {uuid}",
        "tags": [
          "Jobs"
        ],
        "summary": "Delete a Job",
        "operationId": "deleteJob",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Job specifiec by {uuid} exists, or return NotFound.",
        "tags": [
          "Jobs"
        ],
        "summary": "See if a Job exists",
        "operationId": "headJob",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Job specified by {uuid} using a RFC6902 Patch structure",
        "tags": [
          "Jobs"
        ],
        "summary": "Patch a Job",
        "operationId": "patchJob",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/jobs/{uuid}/actions": {
      "get": {
        "description": "List Job plugin_actions for a Job specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Jobs"
        ],
        "summary": "List job plugin_actions Job",
        "operationId": "getJobActions",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OS",
            "name": "os",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoJobResponse"
          },
          "403": {
            "$ref": "#/responses/NoJobResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/jobs/{uuid}/log": {
      "get": {
        "description": "Get log for the Job specified by {uuid} or return NotFound.",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "tags": [
          "Jobs"
        ],
        "summary": "Get the log for this job",
        "operationId": "getJobLog",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobLogResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Jobs"
        ],
        "summary": "Append the string to the end of the job's log.",
        "operationId": "putJobLog",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Get log for the Job specified by {uuid} or return NotFound.",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "tags": [
          "Jobs"
        ],
        "summary": "Get the log for this job",
        "operationId": "getJobLog",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JobLogResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/jobs/{uuid}/plugin_actions": {
      "get": {
        "description": "List Job plugin_actions for a Job specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Jobs"
        ],
        "summary": "List job plugin_actions Job",
        "operationId": "getJobActions",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "OS",
            "name": "os",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoJobResponse"
          },
          "403": {
            "$ref": "#/responses/NoJobResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/jobs/{uuid}/plugin_actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Job specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Jobs"
        ],
        "summary": "List specific action for a job Job",
        "operationId": "getJobAction",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoJobResponse"
          },
          "403": {
            "$ref": "#/responses/NoJobResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Jobs"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postJobAction",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoJobResponse"
          },
          "403": {
            "$ref": "#/responses/NoJobResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/leases": {
      "get": {
        "description": "This will show all Leases by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nExpireTime = Date/Time\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Leases"
        ],
        "summary": "Lists Leases filtered by some parameters.",
        "operationId": "listLeases",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Addr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Token",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Strategy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ExpireTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LeasesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nExpireTime = Date/Time\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Leases"
        ],
        "summary": "Stats of the List Leases filtered by some parameters.",
        "operationId": "listStatsLeases",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Addr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Token",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Strategy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ExpireTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/leases/{address}": {
      "get": {
        "description": "Get the Lease specified by {address} or return NotFound.",
        "tags": [
          "Leases"
        ],
        "summary": "Get a Lease",
        "operationId": "getLease",
        "parameters": [
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LeaseResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Lease specified by {address}",
        "tags": [
          "Leases"
        ],
        "summary": "Delete a Lease",
        "operationId": "deleteLease",
        "parameters": [
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LeaseResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Lease specifiec by {address} exists, or return NotFound.",
        "tags": [
          "Leases"
        ],
        "summary": "See if a Lease exists",
        "operationId": "headLease",
        "parameters": [
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      }
    },
    "/leases/{address}/actions": {
      "get": {
        "description": "List Lease actions for a Lease specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Leases"
        ],
        "summary": "List lease actions Lease",
        "operationId": "getLeaseActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoLeaseResponse"
          },
          "403": {
            "$ref": "#/responses/NoLeaseResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/leases/{address}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Lease specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Leases"
        ],
        "summary": "List specific action for a lease Lease",
        "operationId": "getLeaseAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoLeaseResponse"
          },
          "403": {
            "$ref": "#/responses/NoLeaseResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Leases"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postLeaseAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoLeaseResponse"
          },
          "403": {
            "$ref": "#/responses/NoLeaseResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/logs": {
      "get": {
        "description": "Return current contents of the log buffer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logs"
        ],
        "operationId": "getLogs",
        "responses": {
          "200": {
            "$ref": "#/responses/LogResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines": {
      "get": {
        "description": "This will show all Machines by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = UUID string\nName = string\nBootEnv = string\nAddress = IP Address\nRunnable = true/false\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Machines"
        ],
        "summary": "Lists Machines filtered by some parameters.",
        "operationId": "listMachines",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Uuid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "BootEnv",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Address",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Runnable",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachinesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Machine from the provided object",
        "tags": [
          "Machines"
        ],
        "summary": "Create a Machine",
        "operationId": "createMachine",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Force",
            "name": "force",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Machine"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/MachineResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nX-DRP-LIST-COUNT - number of objects in the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nUuid = UUID string\nName = string\nBootEnv = string\nAddress = IP Address\nRunnable = true/false\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Machines"
        ],
        "summary": "Stats of the List Machines filtered by some parameters.",
        "operationId": "listStatsMachines",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Uuid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "BootEnv",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Address",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Runnable",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines/{uuid}": {
      "get": {
        "description": "Get the Machine specified by {uuid} or return NotFound.",
        "tags": [
          "Machines"
        ],
        "summary": "Get a Machine",
        "operationId": "getMachine",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Machine specified by {uuid} using a JSON Machine",
        "tags": [
          "Machines"
        ],
        "summary": "Put a Machine",
        "operationId": "putMachine",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Force",
            "name": "force",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Machine"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "summary": "Delete a Machine",
        "operationId": "deleteMachine",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Machine specifiec by {uuid} exists, or return NotFound.",
        "tags": [
          "Machines"
        ],
        "summary": "See if a Machine exists",
        "operationId": "headMachine",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Machine specified by {uuid} using a RFC6902 Patch structure",
        "tags": [
          "Machines"
        ],
        "summary": "Patch a Machine",
        "operationId": "patchMachine",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Force",
            "name": "force",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines/{uuid}/actions": {
      "get": {
        "description": "List Machine actions for a Machine specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Machines"
        ],
        "summary": "List machine actions Machine",
        "operationId": "getMachineActions",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines/{uuid}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Machine specified by {uuid}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Machines"
        ],
        "summary": "List specific action for a machine Machine",
        "operationId": "getMachineAction",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Machines"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postMachineAction",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines/{uuid}/params": {
      "get": {
        "description": "List Machine parms for a Machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "summary": "List machine params Machine",
        "operationId": "getMachineParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Aggregate",
            "name": "aggregate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Sets parameters for a machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "operationId": "postMachineParams",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Update params for Machine {uuid} with the passed-in patch",
        "tags": [
          "Machines"
        ],
        "operationId": "patchMachineParams",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines/{uuid}/params/{key}": {
      "get": {
        "description": "Delete a single parameter {key} for a Machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "summary": "Delete a single machine parameter",
        "operationId": "getMachineParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Aggregate",
            "name": "aggregate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Set as single Parameter {key} for a machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "operationId": "postMachineParam",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a single parameter {key} for a Machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "summary": "Delete a single machine parameter",
        "operationId": "getMachineParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Aggregate",
            "name": "aggregate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MachineParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/machines/{uuid}/pubkey": {
      "get": {
        "description": "Get the public key for a Machine specified by {uuid}",
        "tags": [
          "Machines"
        ],
        "summary": "Get the public key for secure params on a machine",
        "operationId": "getMachinePubKey",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "x-go-name": "Uuid",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PubKeyResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/meta/{type}/{id}": {
      "get": {
        "description": "Get the appropriate Metadata or return NotFound.",
        "tags": [
          "Meta"
        ],
        "summary": "Get Metadata for an Object of {type} idendified by {id}",
        "operationId": "getMeta",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Type",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MetaResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentRespons"
          }
        }
      },
      "patch": {
        "description": "Update metadata on a specific Object using a RFC6902 Patch structure",
        "tags": [
          "Meta"
        ],
        "summary": "Patch metadata on an Object of {type} with an ID of {id}",
        "operationId": "patchMeta",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Type",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MetasResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/objects": {
      "get": {
        "description": "Lists the object types in the system",
        "tags": [
          "Objects"
        ],
        "operationId": "listObjects",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      }
    },
    "/params": {
      "get": {
        "description": "This will show all Params by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Params"
        ],
        "summary": "Lists Params filtered by some parameters.",
        "operationId": "listParams",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Param from the provided object",
        "tags": [
          "Params"
        ],
        "summary": "Create a Param",
        "operationId": "createParam",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Param"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ParamResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Params"
        ],
        "summary": "Stats of the List Params filtered by some parameters.",
        "operationId": "listStatsParams",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/params/{name}": {
      "get": {
        "description": "Get the Param specified by {name} or return NotFound.",
        "tags": [
          "Params"
        ],
        "summary": "Get a Param",
        "operationId": "getParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Param specified by {name} using a JSON Param",
        "tags": [
          "Params"
        ],
        "summary": "Put a Param",
        "operationId": "putParam",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Param"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ParamResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Param specified by {name}",
        "tags": [
          "Params"
        ],
        "summary": "Delete a Param",
        "operationId": "deleteParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Param specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Params"
        ],
        "summary": "See if a Param exists",
        "operationId": "headParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Param specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Params"
        ],
        "summary": "Patch a Param",
        "operationId": "patchParam",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ParamResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugin_providers": {
      "get": {
        "description": "Lists possible plugin_provider on the system to create plugins",
        "produces": [
          "application/json"
        ],
        "tags": [
          "PluginProviders"
        ],
        "operationId": "listPluginProviders",
        "responses": {
          "200": {
            "$ref": "#/responses/PluginProvidersResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Stats of the list of plugin_provider on the system to create plugins",
        "produces": [
          "application/json"
        ],
        "tags": [
          "PluginProviders"
        ],
        "operationId": "headPluginProviders",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginProvidersResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugin_providers/{name}": {
      "get": {
        "description": "Get a specific plugin specified by {name}.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "PluginProviders"
        ],
        "summary": "Get a specific plugin with {name}",
        "operationId": "getPluginProvider",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginProviderResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "PluginProviders"
        ],
        "summary": "Upload a plugin provider to a specific {name}.",
        "operationId": "uploadPluginProvider",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/PluginProviderInfoResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "507": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "The plugin provider will be removed from the system.",
        "tags": [
          "PluginProviders"
        ],
        "summary": "Delete a plugin provider",
        "operationId": "deletePluginProvider",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Plugin Provider specified by {name} exists, or return NotFound.",
        "tags": [
          "PluginProviders"
        ],
        "summary": "See if a Plugin Provider exists",
        "operationId": "headPluginProvider",
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      }
    },
    "/plugins": {
      "get": {
        "description": "This will show all Plugins by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Plugins"
        ],
        "summary": "Lists Plugins filtered by some parameters.",
        "operationId": "listPlugins",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Provider",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Plugin from the provided object",
        "tags": [
          "Plugins"
        ],
        "summary": "Create a Plugin",
        "operationId": "createPlugin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plugin"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/PluginResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Plugins"
        ],
        "summary": "Stats of the List Plugins filtered by some parameters.",
        "operationId": "listStatsPlugins",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Provider",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{name}": {
      "get": {
        "description": "Get the Plugin specified by {name} or return NotFound.",
        "tags": [
          "Plugins"
        ],
        "summary": "Get a Plugin",
        "operationId": "getPlugin",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Plugin specified by {name} using a JSON Plugin",
        "tags": [
          "Plugins"
        ],
        "summary": "Put a Plugin",
        "operationId": "putPlugin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plugin"
            }
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Plugin specified by {name}",
        "tags": [
          "Plugins"
        ],
        "summary": "Delete a Plugin",
        "operationId": "deletePlugin",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Plugin specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Plugins"
        ],
        "summary": "See if a Plugin exists",
        "operationId": "headPlugin",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Plugin specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Plugins"
        ],
        "summary": "Patch a Plugin",
        "operationId": "patchPlugin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{name}/actions": {
      "get": {
        "description": "List Plugin actions for a Plugin specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Plugins"
        ],
        "summary": "List plugin actions Plugin",
        "operationId": "getPluginActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoPluginResponse"
          },
          "403": {
            "$ref": "#/responses/NoPluginResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Plugin specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Plugins"
        ],
        "summary": "List specific action for a plugin Plugin",
        "operationId": "getPluginAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoPluginResponse"
          },
          "403": {
            "$ref": "#/responses/NoPluginResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Plugins"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postPluginAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoPluginResponse"
          },
          "403": {
            "$ref": "#/responses/NoPluginResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{name}/params": {
      "get": {
        "description": "List Plugin parms for a Plugin specified by {name}",
        "tags": [
          "Plugins"
        ],
        "summary": "List plugin params Plugin",
        "operationId": "getPluginParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Sets parameters for a plugin specified by {name}",
        "tags": [
          "Plugins"
        ],
        "operationId": "postPluginParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Update params for Plugin {name} with the passed-in patch",
        "tags": [
          "Plugins"
        ],
        "operationId": "patchPluginParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{name}/params/{key}": {
      "get": {
        "description": "Delete a single parameter {key} for a Plugin specified by {uuid}",
        "tags": [
          "Plugins"
        ],
        "summary": "Delete a single plugin parameter",
        "operationId": "getPluginParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Set as single Parameter {key} for a plugin specified by {name}",
        "tags": [
          "Plugins"
        ],
        "operationId": "postPluginParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{name}/pubkey": {
      "get": {
        "description": "Get the public key for a Plugin specified by {name}",
        "tags": [
          "Plugins"
        ],
        "summary": "Get the public key for secure params on a plugin",
        "operationId": "getPluginPubKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PubKeyResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/plugins/{uuid}/params/{key}": {
      "delete": {
        "description": "Delete a single parameter {key} for a Plugin specified by {uuid}",
        "tags": [
          "Plugins"
        ],
        "summary": "Delete a single plugin parameter",
        "operationId": "getPluginParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PluginParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/prefs": {
      "get": {
        "description": "This will show all Prefs by default",
        "tags": [
          "Prefs"
        ],
        "summary": "Lists Prefs",
        "operationId": "listPrefs",
        "responses": {
          "200": {
            "$ref": "#/responses/PrefsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "post": {
        "description": "Create a Pref from the provided object",
        "tags": [
          "Prefs"
        ],
        "summary": "Create a Pref",
        "operationId": "setPrefs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/PrefsResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "description": "This will show all Profiles by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Profiles"
        ],
        "summary": "Lists Profiles filtered by some parameters.",
        "operationId": "listProfiles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfilesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Profile from the provided object",
        "tags": [
          "Profiles"
        ],
        "summary": "Create a Profile",
        "operationId": "createProfile",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ProfileResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Profiles"
        ],
        "summary": "Stats of the List Profiles filtered by some parameters.",
        "operationId": "listStatsProfiles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{name}": {
      "get": {
        "description": "Get the Profile specified by {name} or return NotFound.",
        "tags": [
          "Profiles"
        ],
        "summary": "Get a Profile",
        "operationId": "getProfile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Profile specified by {name} using a JSON Profile",
        "tags": [
          "Profiles"
        ],
        "summary": "Put a Profile",
        "operationId": "putProfile",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Profile specified by {name}",
        "tags": [
          "Profiles"
        ],
        "summary": "Delete a Profile",
        "operationId": "deleteProfile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Profile specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Profiles"
        ],
        "summary": "See if a Profile exists",
        "operationId": "headProfile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Profile specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Profiles"
        ],
        "summary": "Patch a Profile",
        "operationId": "patchProfile",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{name}/actions": {
      "get": {
        "description": "List Profile actions for a Profile specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Profiles"
        ],
        "summary": "List profile actions Profile",
        "operationId": "getProfileActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoProfileResponse"
          },
          "403": {
            "$ref": "#/responses/NoProfileResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Profile specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Profiles"
        ],
        "summary": "List specific action for a profile Profile",
        "operationId": "getProfileAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoProfileResponse"
          },
          "403": {
            "$ref": "#/responses/NoProfileResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Profiles"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postProfileAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoProfileResponse"
          },
          "403": {
            "$ref": "#/responses/NoProfileResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{name}/params": {
      "get": {
        "description": "List Profile parms for a Profile specified by {name}",
        "tags": [
          "Profiles"
        ],
        "summary": "List profile params Profile",
        "operationId": "getProfileParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Sets parameters for a profile specified by {name}",
        "tags": [
          "Profiles"
        ],
        "operationId": "postProfileParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Update params for Profile {name} with the passed-in patch",
        "tags": [
          "Profiles"
        ],
        "operationId": "patchProfileParams",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{name}/params/{key}": {
      "get": {
        "description": "Delete a single parameter {key} for a Profile specified by {uuid}",
        "tags": [
          "Profiles"
        ],
        "summary": "Delete a single profile parameter",
        "operationId": "getProfileParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Set as single Parameter {key} for a profile specified by {name}",
        "tags": [
          "Profiles"
        ],
        "operationId": "postProfileParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{name}/pubkey": {
      "get": {
        "description": "Get the public key for a Profile specified by {name}",
        "tags": [
          "Profiles"
        ],
        "summary": "Get the public key for secure params on a profile",
        "operationId": "getProfilePubKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PubKeyResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/profiles/{uuid}/params/{key}": {
      "delete": {
        "description": "Delete a single parameter {key} for a Profile specified by {uuid}",
        "tags": [
          "Profiles"
        ],
        "summary": "Delete a single profile parameter",
        "operationId": "getProfileParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProfileParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "description": "This will show all Reservations by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nNextServer = IP Address\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Reservations"
        ],
        "summary": "Lists Reservations filtered by some parameters.",
        "operationId": "listReservations",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Addr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Token",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Strategy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "NextServer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReservationsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Reservation from the provided object",
        "tags": [
          "Reservations"
        ],
        "summary": "Create a Reservation",
        "operationId": "createReservation",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ReservationResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nAddr = IP Address\nToken = string\nStrategy = string\nNextServer = IP Address\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Reservations"
        ],
        "summary": "Stats of the List Reservations filtered by some parameters.",
        "operationId": "listStatsReservations",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Addr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Token",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Strategy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "NextServer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/reservations/{address}": {
      "get": {
        "description": "Get the Reservation specified by {address} or return NotFound.",
        "tags": [
          "Reservations"
        ],
        "summary": "Get a Reservation",
        "operationId": "getReservation",
        "parameters": [
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReservationResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Reservation specified by {address} using a JSON Reservation",
        "tags": [
          "Reservations"
        ],
        "summary": "Put a Reservation",
        "operationId": "putReservation",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReservationResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Reservation specified by {address}",
        "tags": [
          "Reservations"
        ],
        "summary": "Delete a Reservation",
        "operationId": "deleteReservation",
        "parameters": [
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReservationResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Reservation specific by {address} exists, or return NotFound.",
        "tags": [
          "Reservations"
        ],
        "summary": "See if a Reservation exists",
        "operationId": "headReservation",
        "parameters": [
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Reservation specified by {address} using a RFC6902 Patch structure",
        "tags": [
          "Reservations"
        ],
        "summary": "Patch a Reservation",
        "operationId": "patchReservation",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "format": "ipv4",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReservationResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/reservations/{address}/actions": {
      "get": {
        "description": "List Reservation actions for a Reservation specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Reservations"
        ],
        "summary": "List reservation actions Reservation",
        "operationId": "getReservationActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoReservationResponse"
          },
          "403": {
            "$ref": "#/responses/NoReservationResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/reservations/{address}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Reservation specified by {address}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Reservations"
        ],
        "summary": "List specific action for a reservation Reservation",
        "operationId": "getReservationAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoReservationResponse"
          },
          "403": {
            "$ref": "#/responses/NoReservationResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Reservations"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postReservationAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoReservationResponse"
          },
          "403": {
            "$ref": "#/responses/NoReservationResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "description": "This will show all Roles by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Roles"
        ],
        "summary": "Lists Roles filtered by some parameters.",
        "operationId": "listRoles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RolesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Role from the provided object",
        "tags": [
          "Roles"
        ],
        "summary": "Create a Role",
        "operationId": "createRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/RoleResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Roles"
        ],
        "summary": "Stats of the List Roles filtered by some parameters.",
        "operationId": "listStatsRoles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/roles/{name}": {
      "get": {
        "description": "Get the Role specified by {name} or return NotFound.",
        "tags": [
          "Roles"
        ],
        "summary": "Get a Role",
        "operationId": "getRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RoleResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Role specified by {name} using a JSON Role",
        "tags": [
          "Roles"
        ],
        "summary": "Put a Role",
        "operationId": "putRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RoleResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Role specified by {name}",
        "tags": [
          "Roles"
        ],
        "summary": "Delete a Role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RoleResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Role specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Roles"
        ],
        "summary": "See if a Role exists",
        "operationId": "headRole",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Role specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Roles"
        ],
        "summary": "Patch a Role",
        "operationId": "patchRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RoleResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/roles/{name}/actions": {
      "get": {
        "description": "List Role actions for a Role specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Roles"
        ],
        "summary": "List role actions Role",
        "operationId": "getRoleActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoRoleResponse"
          },
          "403": {
            "$ref": "#/responses/NoRoleResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/roles/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Role specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Roles"
        ],
        "summary": "List specific action for a role Role",
        "operationId": "getRoleAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoRoleResponse"
          },
          "403": {
            "$ref": "#/responses/NoRoleResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Roles"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postRoleAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoRoleResponse"
          },
          "403": {
            "$ref": "#/responses/NoRoleResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages": {
      "get": {
        "description": "This will show all Stages by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Stages"
        ],
        "summary": "Lists Stages filtered by some parameters.",
        "operationId": "listStages",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Reboot",
            "in": "query"
          },
          {
            "type": "string",
            "name": "BootEnv",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StagesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Stage from the provided object",
        "tags": [
          "Stages"
        ],
        "summary": "Create a Stage",
        "operationId": "createStage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stage"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/StageResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Stages"
        ],
        "summary": "Stats of the List Stages filtered by some parameters.",
        "operationId": "listStatsStages",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Reboot",
            "in": "query"
          },
          {
            "type": "string",
            "name": "BootEnv",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Slim",
            "name": "slim",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages/{name}": {
      "get": {
        "description": "Get the Stage specified by {name} or return NotFound.",
        "tags": [
          "Stages"
        ],
        "summary": "Get a Stage",
        "operationId": "getStage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Stage specified by {name} using a JSON Stage",
        "tags": [
          "Stages"
        ],
        "summary": "Put a Stage",
        "operationId": "putStage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stage"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "summary": "Delete a Stage",
        "operationId": "deleteStage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Stage specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Stages"
        ],
        "summary": "See if a Stage exists",
        "operationId": "headStage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Stage specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Stages"
        ],
        "summary": "Patch a Stage",
        "operationId": "patchStage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages/{name}/actions": {
      "get": {
        "description": "List Stage actions for a Stage specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Stages"
        ],
        "summary": "List stage actions Stage",
        "operationId": "getStageActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoStageResponse"
          },
          "403": {
            "$ref": "#/responses/NoStageResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Stage specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Stages"
        ],
        "summary": "List specific action for a stage Stage",
        "operationId": "getStageAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoStageResponse"
          },
          "403": {
            "$ref": "#/responses/NoStageResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Stages"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postStageAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoStageResponse"
          },
          "403": {
            "$ref": "#/responses/NoStageResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages/{name}/params": {
      "get": {
        "description": "List Stage parms for a Stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "summary": "List stage params Stage",
        "operationId": "getStageParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Aggregate",
            "name": "aggregate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Params",
            "name": "params",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Sets parameters for a stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "operationId": "postStageParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Update params for Stage {name} with the passed-in patch",
        "tags": [
          "Stages"
        ],
        "operationId": "patchStageParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageParamsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages/{name}/params/{key}": {
      "get": {
        "description": "Delete a single parameter {key} for a Stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "summary": "Delete a single stage parameter",
        "operationId": "getStageParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Aggregate",
            "name": "aggregate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Set as single Parameter {key} for a stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "operationId": "postStageParam",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a single parameter {key} for a Stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "summary": "Delete a single stage parameter",
        "operationId": "getStageParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Aggregate",
            "name": "aggregate",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Decode",
            "name": "decode",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StageParamResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/stages/{name}/pubkey": {
      "get": {
        "description": "Get the public key for a Stage specified by {name}",
        "tags": [
          "Stages"
        ],
        "summary": "Get the public key for secure params on a stage",
        "operationId": "getStagePubKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PubKeyResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/subnets": {
      "get": {
        "description": "This will show all Subnets by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nNextServer = IP Address\nSubnet = CIDR Address\nStrategy = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nEnabled = boolean\nProxy = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Subnets"
        ],
        "summary": "Lists Subnets filtered by some parameters.",
        "operationId": "listSubnets",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Strategy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "NextServer",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Subnet",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Enabled",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Proxy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubnetsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Subnet from the provided object",
        "tags": [
          "Subnets"
        ],
        "summary": "Create a Subnet",
        "operationId": "createSubnet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/SubnetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nNextServer = IP Address\nSubnet = CIDR Address\nStrategy = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\nEnabled = boolean\nProxy = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Subnets"
        ],
        "summary": "Stats of the List Subnets filtered by some parameters.",
        "operationId": "listStatsSubnets",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Strategy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "NextServer",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Subnet",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Enabled",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Proxy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/subnets/{name}": {
      "get": {
        "description": "Get the Subnet specified by {name} or return NotFound.",
        "tags": [
          "Subnets"
        ],
        "summary": "Get a Subnet",
        "operationId": "getSubnet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubnetResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Subnet specified by {name} using a JSON Subnet",
        "tags": [
          "Subnets"
        ],
        "summary": "Put a Subnet",
        "operationId": "putSubnet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubnetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Subnet specified by {name}",
        "tags": [
          "Subnets"
        ],
        "summary": "Delete a Subnet",
        "operationId": "deleteSubnet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubnetResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Subnet specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Subnets"
        ],
        "summary": "See if a Subnet exists",
        "operationId": "headSubnet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Subnet specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Subnets"
        ],
        "summary": "Patch a Subnet",
        "operationId": "patchSubnet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubnetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/subnets/{name}/actions": {
      "get": {
        "description": "List Subnet actions for a Subnet specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Subnets"
        ],
        "summary": "List subnet actions Subnet",
        "operationId": "getSubnetActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoSubnetResponse"
          },
          "403": {
            "$ref": "#/responses/NoSubnetResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/subnets/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Subnet specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Subnets"
        ],
        "summary": "List specific action for a subnet Subnet",
        "operationId": "getSubnetAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoSubnetResponse"
          },
          "403": {
            "$ref": "#/responses/NoSubnetResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Subnets"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postSubnetAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoSubnetResponse"
          },
          "403": {
            "$ref": "#/responses/NoSubnetResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/system/actions": {
      "get": {
        "description": "List System actions\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "System"
        ],
        "summary": "List system actions System",
        "operationId": "getSystemActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoSystemResponse"
          },
          "403": {
            "$ref": "#/responses/NoSystemResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/system/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for System\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "System"
        ],
        "summary": "List specific action for System",
        "operationId": "getSystemAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoSystemResponse"
          },
          "403": {
            "$ref": "#/responses/NoSystemResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "System"
        ],
        "summary": "Call an action on the system.",
        "operationId": "postSystemAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoSystemResponse"
          },
          "403": {
            "$ref": "#/responses/NoSystemResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/system/upgrade": {
      "post": {
        "description": "The file will be uploaded and used to replace the running DRP instance.",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "System"
        ],
        "summary": "Upload a file to upgrade the DRP system",
        "operationId": "systemUpdate",
        "responses": {
          "202": {
            "$ref": "#/responses/FileInfoResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "415": {
            "$ref": "#/responses/ErrorResponse"
          },
          "507": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "description": "This will show all Tasks by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Tasks"
        ],
        "summary": "Lists Tasks filtered by some parameters.",
        "operationId": "listTasks",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TasksResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Task from the provided object",
        "tags": [
          "Tasks"
        ],
        "summary": "Create a Task",
        "operationId": "createTask",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/TaskResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nProvider = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Tasks"
        ],
        "summary": "Stats of the List Tasks filtered by some parameters.",
        "operationId": "listStatsTasks",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tasks/{name}": {
      "get": {
        "description": "Get the Task specified by {name} or return NotFound.",
        "tags": [
          "Tasks"
        ],
        "summary": "Get a Task",
        "operationId": "getTask",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TaskResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Task specified by {name} using a JSON Task",
        "tags": [
          "Tasks"
        ],
        "summary": "Put a Task",
        "operationId": "putTask",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TaskResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Task specified by {name}",
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a Task",
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TaskResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Task specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Tasks"
        ],
        "summary": "See if a Task exists",
        "operationId": "headTask",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Task specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Tasks"
        ],
        "summary": "Patch a Task",
        "operationId": "patchTask",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TaskResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tasks/{name}/actions": {
      "get": {
        "description": "List Task actions for a Task specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Tasks"
        ],
        "summary": "List task actions Task",
        "operationId": "getTaskActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoTaskResponse"
          },
          "403": {
            "$ref": "#/responses/NoTaskResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tasks/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Task specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Tasks"
        ],
        "summary": "List specific action for a task Task",
        "operationId": "getTaskAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoTaskResponse"
          },
          "403": {
            "$ref": "#/responses/NoTaskResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Tasks"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postTaskAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoTaskResponse"
          },
          "403": {
            "$ref": "#/responses/NoTaskResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "description": "This will show all Templates by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nID = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nID=fred - returns items named fred\nID=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Templates"
        ],
        "summary": "Lists Templates filtered by some parameters.",
        "operationId": "listTemplates",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TemplatesResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Template from the provided object",
        "tags": [
          "Templates"
        ],
        "summary": "Create a Template",
        "operationId": "createTemplate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/TemplateResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nID = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nID=fred - returns items named fred\nID=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Templates"
        ],
        "summary": "Stats of the List Templates filtered by some parameters.",
        "operationId": "listStatsTemplates",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "description": "Get the Template specified by {id} or return NotFound.",
        "tags": [
          "Templates"
        ],
        "summary": "Get a Template",
        "operationId": "getTemplate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TemplateResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Template specified by {id} using a JSON Template",
        "tags": [
          "Templates"
        ],
        "summary": "Put a Template",
        "operationId": "putTemplate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TemplateResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Template specified by {id}",
        "tags": [
          "Templates"
        ],
        "summary": "Delete a Template",
        "operationId": "deleteTemplate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TemplateResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Template specifiec by {id} exists, or return NotFound.",
        "tags": [
          "Templates"
        ],
        "summary": "See if a Template exists",
        "operationId": "headTemplate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Template specified by {id} using a RFC6902 Patch structure",
        "tags": [
          "Templates"
        ],
        "summary": "Patch a Template",
        "operationId": "patchTemplate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TemplateResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/templates/{id}/actions": {
      "get": {
        "description": "List Template actions for a Template specified by {id}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Templates"
        ],
        "summary": "List template actions Template",
        "operationId": "getTemplateActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoTemplateResponse"
          },
          "403": {
            "$ref": "#/responses/NoTemplateResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/templates/{id}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Template specified by {id}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Templates"
        ],
        "summary": "List specific action for a template Template",
        "operationId": "getTemplateAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoTemplateResponse"
          },
          "403": {
            "$ref": "#/responses/NoTemplateResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Templates"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postTemplateAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoTemplateResponse"
          },
          "403": {
            "$ref": "#/responses/NoTemplateResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "description": "This will show all Tenants by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Tenants"
        ],
        "summary": "Lists Tenants filtered by some parameters.",
        "operationId": "listTenants",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Tenant from the provided object",
        "tags": [
          "Tenants"
        ],
        "summary": "Create a Tenant",
        "operationId": "createTenant",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/TenantResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Tenants"
        ],
        "summary": "Stats of the List Tenants filtered by some parameters.",
        "operationId": "listStatsTenants",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tenants/{name}": {
      "get": {
        "description": "Get the Tenant specified by {name} or return NotFound.",
        "tags": [
          "Tenants"
        ],
        "summary": "Get a Tenant",
        "operationId": "getTenant",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Tenant specified by {name} using a JSON Tenant",
        "tags": [
          "Tenants"
        ],
        "summary": "Put a Tenant",
        "operationId": "putTenant",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Tenant specified by {name}",
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a Tenant",
        "operationId": "deleteTenant",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Tenant specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Tenants"
        ],
        "summary": "See if a Tenant exists",
        "operationId": "headTenant",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Tenant specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Tenants"
        ],
        "summary": "Patch a Tenant",
        "operationId": "patchTenant",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TenantResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tenants/{name}/actions": {
      "get": {
        "description": "List Tenant actions for a Tenant specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Tenants"
        ],
        "summary": "List tenant actions Tenant",
        "operationId": "getTenantActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoTenantResponse"
          },
          "403": {
            "$ref": "#/responses/NoTenantResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/tenants/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Tenant specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Tenants"
        ],
        "summary": "List specific action for a tenant Tenant",
        "operationId": "getTenantAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoTenantResponse"
          },
          "403": {
            "$ref": "#/responses/NoTenantResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Tenants"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postTenantAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoTenantResponse"
          },
          "403": {
            "$ref": "#/responses/NoTenantResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "This will show all Users by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Users"
        ],
        "summary": "Lists Users filtered by some parameters.",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsersResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a User from the provided object",
        "tags": [
          "Users"
        ],
        "summary": "Create a User",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nAvailable = boolean\nValid = boolean\nReadOnly = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.",
        "tags": [
          "Users"
        ],
        "summary": "Stats of the List Users filtered by some parameters.",
        "operationId": "listStatsUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/{name}": {
      "get": {
        "description": "Get the User specified by {name} or return NotFound.",
        "tags": [
          "Users"
        ],
        "summary": "Get a User",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a User specified by {name} using a JSON User",
        "tags": [
          "Users"
        ],
        "summary": "Put a User",
        "operationId": "putUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a User specified by {name}",
        "tags": [
          "Users"
        ],
        "summary": "Delete a User",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the User specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Users"
        ],
        "summary": "See if a User exists",
        "operationId": "headUser",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a User specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Users"
        ],
        "summary": "Patch a User",
        "operationId": "patchUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/{name}/actions": {
      "get": {
        "description": "List User actions for a User specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Users"
        ],
        "summary": "List user actions User",
        "operationId": "getUserActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoUserResponse"
          },
          "403": {
            "$ref": "#/responses/NoUserResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a User specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Users"
        ],
        "summary": "List specific action for a user User",
        "operationId": "getUserAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoUserResponse"
          },
          "403": {
            "$ref": "#/responses/NoUserResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Users"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postUserAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoUserResponse"
          },
          "403": {
            "$ref": "#/responses/NoUserResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/{name}/password": {
      "put": {
        "description": "Update a User specified by {name} using a JSON User",
        "tags": [
          "Users"
        ],
        "summary": "Set the password for a user.",
        "operationId": "putUserPassword",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPassword"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/{name}/token": {
      "get": {
        "description": "Get a token for the User specified by {name} or return error",
        "tags": [
          "Users"
        ],
        "summary": "Get a User Token",
        "operationId": "getUserToken",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TTL",
            "name": "ttl",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Roles",
            "name": "roles",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserTokenResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "description": "This will show all Workflows by default.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Workflows"
        ],
        "summary": "Lists Workflows filtered by some parameters.",
        "operationId": "listWorkflows",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Reboot",
            "in": "query"
          },
          {
            "type": "string",
            "name": "BootEnv",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WorkflowsResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Create a Workflow from the provided object",
        "tags": [
          "Workflows"
        ],
        "summary": "Create a Workflow",
        "operationId": "createWorkflow",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/WorkflowResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "This will return headers with the stats of the list.\n\nYou may specify:\nOffset = integer, 0-based inclusive starting point in filter data.\nLimit = integer, number of items to return\n\nFunctional Indexs:\nName = string\nReboot = boolean\nBootEnv = string\nAvailable = boolean\n\nFunctions:\nEq(value) = Return items that are equal to value\nLt(value) = Return items that are less than value\nLte(value) = Return items that less than or equal to value\nGt(value) = Return items that are greater than value\nGte(value) = Return items that greater than or equal to value\nBetween(lower,upper) = Return items that are inclusively between lower and upper\nExcept(lower,upper) = Return items that are not inclusively between lower and upper\n\nExample:\nName=fred - returns items named fred\nName=Lt(fred) - returns items that alphabetically less than fred.\nName=Lt(fred)\u0026Available=true - returns items with Name less than fred and Available is true",
        "tags": [
          "Workflows"
        ],
        "summary": "Stats of the List Workflows filtered by some parameters.",
        "operationId": "listStatsWorkflows",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offest",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Available",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Valid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ReadOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Reboot",
            "in": "query"
          },
          {
            "type": "string",
            "name": "BootEnv",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/workflows/{name}": {
      "get": {
        "description": "Get the Workflow specified by {name} or return NotFound.",
        "tags": [
          "Workflows"
        ],
        "summary": "Get a Workflow",
        "operationId": "getWorkflow",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WorkflowResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "description": "Update a Workflow specified by {name} using a JSON Workflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Put a Workflow",
        "operationId": "putWorkflow",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WorkflowResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "Delete a Workflow specified by {name}",
        "tags": [
          "Workflows"
        ],
        "summary": "Delete a Workflow",
        "operationId": "deleteWorkflow",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WorkflowResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "head": {
        "description": "Return 200 if the Workflow specifiec by {name} exists, or return NotFound.",
        "tags": [
          "Workflows"
        ],
        "summary": "See if a Workflow exists",
        "operationId": "headWorkflow",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContentResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/NoContentResponse"
          }
        }
      },
      "patch": {
        "description": "Update a Workflow specified by {name} using a RFC6902 Patch structure",
        "tags": [
          "Workflows"
        ],
        "summary": "Patch a Workflow",
        "operationId": "patchWorkflow",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patch"
            }
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/WorkflowResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoContentResponse"
          },
          "403": {
            "$ref": "#/responses/NoContentResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/workflows/{name}/actions": {
      "get": {
        "description": "List Workflow actions for a Workflow specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Workflows"
        ],
        "summary": "List workflow actions Workflow",
        "operationId": "getWorkflowActions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionsResponse"
          },
          "401": {
            "$ref": "#/responses/NoWorkflowResponse"
          },
          "403": {
            "$ref": "#/responses/NoWorkflowResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/workflows/{name}/actions/{cmd}": {
      "get": {
        "description": "List specific {cmd} action for a Workflow specified by {name}\n\nOptionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Workflows"
        ],
        "summary": "List specific action for a workflow Workflow",
        "operationId": "getWorkflowAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoWorkflowResponse"
          },
          "403": {
            "$ref": "#/responses/NoWorkflowResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "description": "Optionally, a query parameter can be used to limit the scope to a specific plugin.\ne.g. ?plugin=fred",
        "tags": [
          "Workflows"
        ],
        "summary": "Call an action on the node.",
        "operationId": "postWorkflowAction",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Cmd",
            "name": "cmd",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Plugin",
            "name": "plugin",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ActionPostResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/NoWorkflowResponse"
          },
          "403": {
            "$ref": "#/responses/NoWorkflowResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "ArchInfo": {
      "description": "ArchInfo tracks information required to make a BootEnv work across\ndifferent system architectures.  It supersedes the matching fields\nin the BootEnv struct and the OsInfo struct.",
      "type": "object",
      "required": [
        "Kernel",
        "Initrds",
        "BootParams"
      ],
      "properties": {
        "BootParams": {
          "description": "A template that will be expanded to create the full list of\nboot parameters for the environment.  If empty, this will fall back\nto the top-level BootParams field in the BootEnv",
          "type": "string"
        },
        "Initrds": {
          "description": "Partial paths to the initrds that should be loaded for the boot\nenvironment. These should be paths that the initrds are located\nat in the OS ISO or install archive.  If empty, this will fall back\nto the top-level Initrds field in the BootEnv",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsoFile": {
          "description": "IsoFile is the name of the ISO file (or other archive)\nthat contains all the necessary information to be able to\nboot into this BootEnv for a given arch.\nAt a minimum, it must contain a kernel and initrd that\ncan be booted over the network.",
          "type": "string"
        },
        "IsoUrl": {
          "description": "IsoUrl is the location that IsoFile can be downloaded from, if any.\nThis must be a full URL, including the filename.",
          "type": "string",
          "format": "url"
        },
        "Kernel": {
          "description": "The partial path to the kernel for the boot environment.  This\nshould be path that the kernel is located at in the OS ISO or\ninstall archive.  If empty, this will fall back to the top-level\nKernel field in the BootEnv",
          "type": "string"
        },
        "Loader": {
          "description": "Loader is the bootloader that should be used for this boot\nenvironment.  If left unspecified and not overridden by a subnet\nor reservation option, the following boot loaders will be used:\n\nlpxelinux.0 on 386-pcbios platforms that are not otherwise using ipxe.\n\nipxe.pxe on 386-pcbios platforms that already use ipxe.\n\nipxe.efi on amd64 EFI platforms.\n\nipxe-arm64.efi on arm64 EFI platforms.\n\nThis setting will be overridden by Subnet and Reservation\noptions, and it will also only be in effect when dr-provision is\nthe DHCP server of record.",
          "type": "string"
        },
        "Sha256": {
          "description": "Sha256 should contain the SHA256 checksum for the IsoFile.\nIf it does, the IsoFile will be checked upon upload to make sure\nit has not been corrupted.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "AvailableAction": {
      "description": "AvailableAction is an Action that a Plugin instantiated by a\nPluginProvider.  Assumes that there are parameters on the call in\naddition to the machine.",
      "type": "object",
      "properties": {
        "Command": {
          "type": "string"
        },
        "Model": {
          "type": "string"
        },
        "OptionalParams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Provider": {
          "type": "string"
        },
        "RequiredParams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "BlobInfo": {
      "type": "object",
      "title": "BlobInfo contains information on an uploaded file or ISO.",
      "properties": {
        "Path": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "BootEnv": {
      "description": "BootEnv encapsulates the machine-agnostic information needed by the\nprovisioner to set up a boot environment.",
      "type": "object",
      "required": [
        "Name",
        "Templates",
        "Kernel",
        "Initrds",
        "BootParams",
        "RequiredParams",
        "OnlyUnknown"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "BootParams": {
          "description": "A template that will be expanded to create the full list of\nboot parameters for the environment.",
          "type": "string"
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "A description of this boot environment.  This should tell what\nthe boot environment is for, any special considerations that\nshould be taken into account when using it, etc.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this boot environment.  This should tell what\nthe boot environment is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Initrds": {
          "description": "Partial paths to the initrds that should be loaded for the boot\nenvironment. These should be paths that the initrds are located\nat in the OS ISO or install archive.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Kernel": {
          "description": "The partial path to the kernel for the boot environment.  This\nshould be path that the kernel is located at in the OS ISO or\ninstall archive.  Kernel must be non-empty for a BootEnv to be\nconsidered net bootable.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the boot environment.  Boot environments that install\nan operating system must end in '-install'.",
          "type": "string"
        },
        "OS": {
          "$ref": "#/definitions/OsInfo"
        },
        "OnlyUnknown": {
          "description": "OnlyUnknown indicates whether this bootenv can be used without a\nmachine.  Only bootenvs with this flag set to `true` be used for\nthe unknownBootEnv preference.",
          "type": "boolean"
        },
        "OptionalParams": {
          "description": "The list of extra optional parameters for this\nbootstate. They can be present as Machine.Params when\nthe bootenv is applied to the machine.  These are more\nother consumers of the bootenv to know what parameters\ncould additionally be applied to the bootenv by the\nrenderer based upon the Machine.Params",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "RequiredParams": {
          "description": "The list of extra required parameters for this\nbootstate. They should be present as Machine.Params when\nthe bootenv is applied to the machine.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Templates": {
          "description": "The templates that should be expanded into files for the\nboot environment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateInfo"
          }
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Claim": {
      "description": "User is an API user of DigitalRebar Provision",
      "type": "object",
      "title": "Claim is an individial specifier for something we are allowed access to.",
      "properties": {
        "action": {
          "type": "string",
          "x-go-name": "Action"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        },
        "specific": {
          "type": "string",
          "x-go-name": "Specific"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Content": {
      "description": "Content models a content bundle.  It consists of the metadata\ndescribing the content bundle and the objects that the content\nbundle provides.  Upon being sucessfully loaded into dr-provision,\nthese objects will be present and immutable until the content\nbundle is removed or replaced.",
      "type": "object",
      "required": [
        "meta"
      ],
      "properties": {
        "meta": {
          "$ref": "#/definitions/ContentMetaData"
        },
        "sections": {
          "$ref": "#/definitions/Sections"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "ContentMetaData": {
      "description": "All fields must be strings\nAll string fields will be trimmed except Documentation.",
      "type": "object",
      "title": "ContentMetaData holds all the metadata about a content bundle that\ndr-provision will use to decide how to treat the content bundle.",
      "required": [
        "Name"
      ],
      "properties": {
        "Author": {
          "type": "string"
        },
        "CodeSource": {
          "type": "string"
        },
        "Color": {
          "description": "New descriptor fields for catalog.  These are used by the UX.",
          "type": "string"
        },
        "Copyright": {
          "type": "string"
        },
        "Description": {
          "description": "Description is a one or two line description of what the content\nbundle provides.",
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "DocUrl": {
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation should contain Sphinx RST formatted documentation\nfor the content bundle describing its usage.",
          "type": "string"
        },
        "Icon": {
          "type": "string"
        },
        "License": {
          "type": "string"
        },
        "Name": {
          "description": "Name is the name of the content bundle.  Name must be unique across\nall content bundles loaded into a given dr-provision instance.",
          "type": "string"
        },
        "Order": {
          "type": "string"
        },
        "Overwritable": {
          "type": "boolean"
        },
        "Prerequisites": {
          "description": "Prerequisites is also a comma-seperated list that contains other\n(possibly version-qualified) content bundles that must be present\nfor this content bundle to load into dr-provision.  Each entry in\nthe Prerequisites list should be in for format of name: version\nconstraints.  The colon and the version constraints may be\nomitted if there are no version restrictions on the required\ncontent bundle.\n\nSee ../doc/arch/content-package.rst for more detailed info.",
          "type": "string"
        },
        "RequiredFeatures": {
          "description": "RequiredFeatures is a comma-seperated list of features that\ndr-provision must provide for the content bundle to operate properly.\nThese correspond to the Features field in the Info struct.",
          "type": "string"
        },
        "Source": {
          "description": "Source is mostly deprecated, replaced by Author and CodeSource.\nIt can be left blank.",
          "type": "string"
        },
        "Tags": {
          "type": "string"
        },
        "Type": {
          "description": "Informational Fields",
          "type": "string"
        },
        "Version": {
          "description": "Version is a Semver-compliant string describing the version of\nthe content as a whole.  If left empty, the version is assumed to\nbe 0.0.0",
          "type": "string"
        },
        "Writable": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "ContentSummary": {
      "type": "object",
      "properties": {
        "Counts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "Warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta": {
          "$ref": "#/definitions/ContentMetaData"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "DhcpOption": {
      "type": "object",
      "title": "DhcpOption is a representation of a specific DHCP option.",
      "required": [
        "Code",
        "Value"
      ],
      "properties": {
        "Code": {
          "description": "Code is a DHCP Option Code.",
          "type": "integer",
          "format": "uint8"
        },
        "Value": {
          "description": "Value is a text/template that will be expanded\nand then converted into the proper format\nfor the option code",
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Error": {
      "description": "Error is the common Error type the API returns for any error\nconditions.",
      "type": "object",
      "properties": {
        "Code": {
          "description": "code is the HTTP status code that should be used for this Error",
          "type": "integer",
          "format": "int64"
        },
        "Key": {
          "type": "string"
        },
        "Messages": {
          "description": "Messages are any additional messages related to this Error",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Model": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Event": {
      "description": "In general, the event generates for a subject\nof the form: type.action.key",
      "type": "object",
      "title": "Event represents an action in the system.",
      "properties": {
        "Action": {
          "description": "Action - what happened",
          "type": "string"
        },
        "Key": {
          "description": "Key - the id of the object",
          "type": "string"
        },
        "Object": {
          "description": "Object - the data of the object.",
          "type": "object"
        },
        "Original": {
          "description": "Original - the data of the object before the operation (update and save only)",
          "type": "object"
        },
        "Principal": {
          "description": "Principal - the user or subsystem that caused the event to be emitted",
          "type": "string"
        },
        "Time": {
          "description": "Time of the event.",
          "type": "string",
          "format": "date-time"
        },
        "Type": {
          "description": "Type - object type",
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "FilePaths": {
      "description": "FilePaths is a list of files",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/frontend"
    },
    "IP": {
      "description": "Note that in this documentation, referring to an\nIP address as an IPv4 address or an IPv6 address\nis a semantic property of the address, not just the\nlength of the byte slice: a 16-byte slice can still\nbe an IPv4 address.",
      "type": "array",
      "title": "An IP is a single IP address, a slice of bytes.\nFunctions in this package accept either 4-byte (IPv4)\nor 16-byte (IPv6) slices as input.",
      "items": {
        "type": "integer",
        "format": "uint8"
      },
      "x-go-package": "net"
    },
    "Index": {
      "description": "Index holds details on the index",
      "type": "object",
      "properties": {
        "Regex": {
          "description": "Regex indecates whether you can use the Re filter with this index",
          "type": "boolean"
        },
        "Type": {
          "description": "Type gives you a rough idea of how the string used to query\nthis index should be formatted.",
          "type": "string"
        },
        "Unique": {
          "description": "Unique tells you whether there can be mutiple entries in the\nindex for the same key that refer to different items.",
          "type": "boolean"
        },
        "Unordered": {
          "description": "Unordered tells you whether this index cannot be sorted.",
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Info": {
      "description": "Info contains information on how the running instance of\ndr-provision is configured.",
      "type": "object",
      "required": [
        "arch",
        "os",
        "version",
        "id",
        "local_id",
        "ha_id",
        "api_port",
        "file_port",
        "dhcp_port",
        "binl_port",
        "tftp_port",
        "tftp_enabled",
        "dhcp_enabled",
        "binl_enabled",
        "prov_enabled",
        "address",
        "stats"
      ],
      "properties": {
        "License": {
          "$ref": "#/definitions/LicenseBundle"
        },
        "address": {
          "$ref": "#/definitions/IP"
        },
        "api_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ApiPort"
        },
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "binl_enabled": {
          "type": "boolean",
          "x-go-name": "BinlEnabled"
        },
        "binl_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BinlPort"
        },
        "dhcp_enabled": {
          "type": "boolean",
          "x-go-name": "DhcpEnabled"
        },
        "dhcp_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DhcpPort"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Features"
        },
        "file_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FilePort"
        },
        "ha_id": {
          "type": "string",
          "x-go-name": "HaId"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "local_id": {
          "type": "string",
          "x-go-name": "LocalId"
        },
        "os": {
          "type": "string",
          "x-go-name": "Os"
        },
        "prov_enabled": {
          "type": "boolean",
          "x-go-name": "ProvisionerEnabled"
        },
        "scopes": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "x-go-name": "Scopes"
        },
        "stats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stat"
          },
          "x-go-name": "Stats"
        },
        "tftp_enabled": {
          "type": "boolean",
          "x-go-name": "TftpEnabled"
        },
        "tftp_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TftpPort"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Interface": {
      "description": "Interface represents a network interface that is present on the\nserver running dr-provision.  It is primarily used by the UX to\nhelp generate Subnets.",
      "type": "object",
      "required": [
        "Name",
        "Addresses"
      ],
      "properties": {
        "ActiveAddress": {
          "description": "The interface to use for this interface when\nadvertising or claiming access (CIDR)",
          "type": "string"
        },
        "Addresses": {
          "description": "A List of Addresses on the interface (CIDR)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DnsDomain": {
          "description": "Possible DNS for domain for this interface",
          "type": "string"
        },
        "DnsServers": {
          "description": "Possible DNS for this interface",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Gateway": {
          "description": "Possible gateway for this interface",
          "type": "string"
        },
        "Index": {
          "description": "Index of the interface",
          "type": "integer",
          "format": "int64"
        },
        "Name": {
          "description": "Name of the interface",
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "IsoPaths": {
      "description": "IsoPaths is a list of isos",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/frontend"
    },
    "Job": {
      "description": "Job contains information on a Job that is running for a specific\nTask on a Machine.",
      "type": "object",
      "required": [
        "Uuid",
        "Machine",
        "State",
        "Archived",
        "Current",
        "CurrentIndex",
        "NextIndex"
      ],
      "properties": {
        "Archived": {
          "description": "Archived indicates whether the complete log for the job can be\nretrieved via the API.  If Archived is true, then the log cannot\nbe retrieved.",
          "type": "boolean"
        },
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "BootEnv": {
          "description": "The bootenv that the task was created in.",
          "type": "string",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Current": {
          "description": "Whether the job is the \"current one\" for the machine or if it has been superceded.",
          "type": "boolean"
        },
        "CurrentIndex": {
          "description": "The current index is the machine CurrentTask that created this job.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "EndTime": {
          "description": "The time the job failed or finished."
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ExitState": {
          "description": "The final disposition of the job.\nCan be one of \"reboot\",\"poweroff\",\"stop\", or \"complete\"\nOther substates may be added as time goes on",
          "type": "string"
        },
        "Machine": {
          "description": "The machine the job was created for.  This field must be the UUID of the machine.",
          "type": "string",
          "format": "uuid"
        },
        "NextIndex": {
          "description": "The next task index that should be run when this job finishes.  It is used\nin conjunction with the machine CurrentTask to implement the server side of the\nmachine agent state machine.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "Previous": {
          "description": "The UUID of the previous job to run on this machine.",
          "type": "string",
          "format": "uuid"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Stage": {
          "description": "The stage that the task was created in.",
          "type": "string",
          "readOnly": true
        },
        "StartTime": {
          "description": "The time the job started running."
        },
        "State": {
          "description": "The state the job is in.  Must be one of \"created\", \"running\", \"failed\", \"finished\", \"incomplete\"",
          "type": "string"
        },
        "Task": {
          "description": "The task the job was created for.  This will be the name of the task.",
          "type": "string",
          "readOnly": true
        },
        "Uuid": {
          "description": "The UUID of the job.  The primary key.",
          "type": "string",
          "format": "uuid"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        },
        "Workflow": {
          "description": "The workflow that the task was created in.",
          "type": "string",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "JobAction": {
      "description": "If path is specified, then the runner will place the contents into that location.\nIf path is not specified, then the runner will attempt to bash exec the contents.",
      "type": "object",
      "title": "Job Action is something that job runner will need to do.",
      "required": [
        "Name",
        "Path",
        "Content",
        "Meta"
      ],
      "properties": {
        "Content": {
          "type": "string"
        },
        "Meta": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "JobActions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/JobAction"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Lease": {
      "type": "object",
      "title": "Lease tracks DHCP leases.",
      "required": [
        "Addr",
        "Token",
        "ExpireTime",
        "Strategy",
        "State"
      ],
      "properties": {
        "Addr": {
          "description": "Addr is the IP address that the lease handed out.",
          "type": "string",
          "format": "ipv4"
        },
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Duration": {
          "description": "Duration is the time in seconds for which a lease can be valid.\nExpireTime is calculated from Duration.",
          "type": "integer",
          "format": "int32"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ExpireTime": {
          "description": "ExpireTime is the time at which the lease expires and is no\nlonger valid The DHCP renewal time will be half this, and the\nDHCP rebind time will be three quarters of this.",
          "type": "string",
          "format": "date-time"
        },
        "NextServer": {
          "description": "NextServer is the IP address that we should have the machine talk to\nnext.  In most cases, this will be our address.",
          "type": "string",
          "format": "ipv4"
        },
        "Options": {
          "description": "Options are the DHCP options that the Lease is running with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DhcpOption"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "SkipBoot": {
          "description": "SkipBoot indicates that the DHCP system is allowed to offer\nboot options for whatever boot protocol the machine wants to\nuse.",
          "type": "boolean",
          "readOnly": true
        },
        "State": {
          "description": "State is the current state of the lease.  This field is for informational\npurposes only.",
          "type": "string",
          "readOnly": true
        },
        "Strategy": {
          "description": "Strategy is the leasing strategy that will be used determine what to use from\nthe DHCP packet to handle lease management.",
          "type": "string"
        },
        "Token": {
          "description": "Token is the unique token for this lease based on the\nStrategy this lease used.",
          "type": "string"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        },
        "Via": {
          "description": "Via is the IP address used to select which subnet the lease belongs to.\nIt is either an address present on a local interface that dr-provision is\nlistening on, or the GIADDR field of the DHCP request.",
          "type": "string",
          "format": "ipv4"
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Level": {
      "type": "integer",
      "format": "int32",
      "title": "Level is a log level.  It consists of the usual logging levels.",
      "x-go-package": "github.com/digitalrebar/provision/vendor/github.com/digitalrebar/logger"
    },
    "License": {
      "description": "License is used to authorize acess to extended dr-provision\nfeatures and functionality.",
      "type": "object",
      "properties": {
        "Active": {
          "type": "boolean"
        },
        "Data": {
          "type": "object"
        },
        "HardExpireDate": {},
        "LongLicense": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PurchaseDate": {},
        "ShortLicense": {
          "type": "string"
        },
        "SoftExpireDate": {},
        "StartDate": {},
        "Version": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "LicenseBundle": {
      "type": "object",
      "title": "LicenseBundle is a collection of Licenses.",
      "properties": {
        "Contact": {
          "type": "string"
        },
        "ContactEmail": {
          "type": "string"
        },
        "ContactId": {
          "type": "string"
        },
        "Endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "GenerationVersion": {
          "type": "string"
        },
        "Grantor": {
          "type": "string"
        },
        "GrantorEmail": {
          "type": "string"
        },
        "Licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/License"
          }
        },
        "Owner": {
          "type": "string"
        },
        "OwnerEmail": {
          "type": "string"
        },
        "OwnerId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Line": {
      "type": "object",
      "title": "Line is the smallest unit of things we log.",
      "properties": {
        "Data": {
          "description": "Data is any auxillary data that was captured.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "File": {
          "description": "File is the source file that generated the line",
          "type": "string"
        },
        "Group": {
          "description": "Group is an abstract number used to group Lines together",
          "type": "integer",
          "format": "int64"
        },
        "IgnorePublish": {
          "description": "Should the line be published or not as an event.",
          "type": "boolean"
        },
        "Level": {
          "$ref": "#/definitions/Level"
        },
        "Line": {
          "description": "Line is the line number of the line that generated the line.",
          "type": "integer",
          "format": "int64"
        },
        "Message": {
          "description": "Message is the message that was logged.",
          "type": "string"
        },
        "Principal": {
          "description": "Principal is the user or system that caused the log line to be emitted",
          "type": "string"
        },
        "Seq": {
          "description": "Seq is the sequence number that the Line was emitted in.\nSequence numbers are globally unique.",
          "type": "integer",
          "format": "int64"
        },
        "Service": {
          "description": "Service is the name of the log.",
          "type": "string"
        },
        "Time": {
          "description": "Time is when the Line was created."
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/vendor/github.com/digitalrebar/logger"
    },
    "Machine": {
      "description": "Machine represents a single bare-metal system that the provisioner\nshould manage the boot environment for.",
      "type": "object",
      "required": [
        "Name",
        "Uuid",
        "CurrentTask",
        "Runnable",
        "Workflow",
        "Arch",
        "Locked"
      ],
      "properties": {
        "Address": {
          "description": "The IPv4 address of the machine that should be used for PXE\npurposes.  Note that this field does not directly tie into DHCP\nleases or reservations -- the provisioner relies solely on this\naddress when determining what to render for a specific machine.\nAddress is updated automatically by the DHCP system if\nHardwareAddrs is filled out.",
          "type": "string",
          "format": "ipv4"
        },
        "Arch": {
          "description": "Arch is the machine architecture. It should be an arch that can\nbe fed into $GOARCH.",
          "type": "string"
        },
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "BootEnv": {
          "description": "The boot environment that the machine should boot into.  This\nmust be the name of a boot environment present in the backend.\nIf this field is not present or blank, the global default bootenv\nwill be used instead.",
          "type": "string"
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "CurrentJob": {
          "description": "The UUID of the job that is currently running on the machine.",
          "type": "string",
          "format": "uuid"
        },
        "CurrentTask": {
          "description": "The index into the Tasks list for the task that is currently\nrunning (if a task is running) or the next task that will run (if\nno task is currently running).  If -1, then the first task will\nrun next, and if it is equal to the length of the Tasks list then\nall the tasks have finished running.",
          "type": "integer",
          "format": "int64"
        },
        "Description": {
          "description": "A description of this machine.  This can contain any reference\ninformation for humans you want associated with the machine.",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "HardwareAddrs": {
          "description": "HardwareAddrs is a list of MAC addresses we expect that the system might boot from.\nThis must be filled out to enable MAC address based booting from the various bootenvs,\nand must be updated if the MAC addresses for a system change for whatever reason.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Locked": {
          "description": "Locked indicates that changes to the Machine by users are not\nallowed, except for unlocking the machine, which will always\ngenerate an Audit event.",
          "type": "boolean"
        },
        "Name": {
          "description": "The name of the machine.  This must be unique across all\nmachines, and by convention it is the FQDN of the machine,\nalthough nothing enforces that.",
          "type": "string",
          "format": "hostname"
        },
        "OS": {
          "description": "OS is the operating system that the node is running in.  It is updated by Sledgehammer and by\nthe various OS install tasks.",
          "type": "string"
        },
        "Params": {
          "description": "The Parameters that have been directly set on the Machine.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Partial": {
          "description": "Partial tracks if the object is not complete when returned.",
          "type": "boolean",
          "readOnly": true
        },
        "Profile": {
          "$ref": "#/definitions/Profile"
        },
        "Profiles": {
          "description": "An array of profiles to apply to this machine in order when looking\nfor a parameter during rendering.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Runnable": {
          "description": "Indicates if the machine can run jobs or not.  Failed jobs mark the machine\nnot runnable.",
          "type": "boolean"
        },
        "Secret": {
          "description": "Secret for machine token revocation.  Changing the secret will invalidate\nall existing tokens for this machine",
          "type": "string"
        },
        "Stage": {
          "description": "The stage that the Machine is currently in.  If Workflow is also\nset, this field is read-only, otherwise changing it will change\nthe Stage the system is in.",
          "type": "string"
        },
        "Tasks": {
          "description": "The tasks this machine has to run.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Uuid": {
          "description": "The UUID of the machine.\nThis is auto-created at Create time, and cannot change afterwards.",
          "type": "string",
          "format": "uuid"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        },
        "Workflow": {
          "description": "Workflow is the workflow that is currently responsible for processing machine tasks.",
          "type": "string"
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "ObjectPrefixes": {
      "type": "array",
      "title": "ObjectPrefixes represents that list of objects in the backend.",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/frontend"
    },
    "Operation": {
      "description": "operation represents a valid JSON Patch operation as defined by RFC 6902",
      "type": "object",
      "properties": {
        "from": {
          "description": "From is a JSON pointer indicating where a value should be\ncopied/moved from.  From is only used by copy and move operations.",
          "type": "string",
          "x-go-name": "From"
        },
        "op": {
          "description": "Op can be one of:\n\"add\"\n\"remove\"\n\"replace\"\n\"move\"\n\"copy\"\n\"test\"\nAll Operations must have an Op.",
          "type": "string",
          "x-go-name": "Op"
        },
        "path": {
          "description": "Path is a JSON Pointer as defined in RFC 6901\nAll Operations must have a Path",
          "type": "string",
          "x-go-name": "Path"
        },
        "value": {
          "description": "Value is the Value to be used for add, replace, and test operations.",
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/vendor/github.com/VictorLowther/jsonpatch2"
    },
    "OsInfo": {
      "description": "OsInfo holds information about the operating system this BootEnv\nmaps to.  Most of this information is optional for now.",
      "type": "object",
      "required": [
        "Name"
      ],
      "properties": {
        "Codename": {
          "description": "The codename of the OS, if any.",
          "type": "string"
        },
        "Family": {
          "description": "The family of operating system (linux distro lineage, etc)",
          "type": "string"
        },
        "IsoFile": {
          "description": "The name of the ISO that the OS should install from.  If\nnon-empty, this is assumed to be for the amd64 hardware\narchitecture.",
          "type": "string"
        },
        "IsoSha256": {
          "description": "The SHA256 of the ISO file.  Used to check for corrupt downloads.\nIf non-empty, this is assumed to be for the amd64 hardware\narchitecture.",
          "type": "string"
        },
        "IsoUrl": {
          "description": "The URL that the ISO can be downloaded from, if any.  If\nnon-empty, this is assumed to be for the amd64 hardware\narchitecture.",
          "type": "string",
          "format": "uri"
        },
        "Name": {
          "description": "The name of the OS this BootEnv has.  It should be formatted as\nfamily-version.",
          "type": "string"
        },
        "SupportedArchitectures": {
          "description": "SupportedArchitectures maps from hardware architecture (named\naccording to the distro architecture naming scheme) to the\narchitecture-specific parameters for this OS.  If\nSupportedArchitectures is left empty, then the system assumes\nthat the BootEnv only supports amd64 platforms.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ArchInfo"
          }
        },
        "Version": {
          "description": "The version of the OS, if any.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Param": {
      "description": "Specifically, it contains a description of what the information\nis for, detailed documentation about the param, and a JSON schema that\nthe param must match to be considered valid.",
      "type": "object",
      "title": "Param represents metadata about a Parameter or a Preference.",
      "required": [
        "Name",
        "Secure",
        "Schema"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "Description is a one-line description of the parameter.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation details what the parameter does, what values it can\ntake, what it is used for, etc.",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "Name is the name of the param.  Params must be uniquely named.",
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Schema": {
          "description": "Schema must be a valid JSONSchema as of draft v4.",
          "type": "object"
        },
        "Secure": {
          "description": "Secure implies that any API interactions with this Param\nwill deal with SecureData values.",
          "type": "boolean"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Patch": {
      "type": "array",
      "title": "Patch is an array of individual JSON Patch operations.",
      "items": {
        "$ref": "#/definitions/Operation"
      },
      "x-go-package": "github.com/digitalrebar/provision/vendor/github.com/VictorLowther/jsonpatch2"
    },
    "Plugin": {
      "description": "This contains the configuration need to start this plugin instance.",
      "type": "object",
      "title": "Plugin represents a single instance of a running plugin.",
      "required": [
        "Name",
        "Provider"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "A description of this plugin.  This can contain any reference\ninformation for humans you want associated with the plugin.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this plugin.  This should tell what\nthe plugin is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "The name of the plugin instance.  THis must be unique across all\nplugins.",
          "type": "string"
        },
        "Params": {
          "description": "Any additional parameters that may be needed to configure\nthe plugin.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Partial": {
          "description": "Partial tracks if the object is not complete when returned.",
          "type": "boolean",
          "readOnly": true
        },
        "PluginErrors": {
          "description": "Error unrelated to the object validity, but the execution\nof the plugin.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Provider": {
          "description": "The plugin provider for this plugin",
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "PluginProvider": {
      "description": "Plugin Provider describes the available functions that could be\ninstantiated by a plugin.",
      "type": "object",
      "properties": {
        "AutoStart": {
          "type": "boolean"
        },
        "AvailableActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableAction"
          }
        },
        "Content": {
          "description": "Content Bundle Yaml string - can be optional or empty",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this plugin provider.  This should tell what\nthe plugin provider is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "HasPublish": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "OptionalParams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PluginVersion": {
          "description": "This is used to indicate what version the plugin is built for",
          "type": "integer",
          "format": "int64"
        },
        "RequiredParams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "StoreObjects": {
          "description": "Object prefixes that can be accessed by this plugin.\nThe interface can be empty struct{} or a JSONSchema draft v4",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Version": {
          "type": "string"
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "PluginProviderUploadInfo": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Profile": {
      "description": "There is one special profile named 'global' that acts\nas a global set of parameters for the system.\n\nThese can be assigned to a machine's profile list.",
      "type": "object",
      "title": "Profile represents a set of key/values to use in\ntemplate expansion.",
      "required": [
        "Name"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "A description of this profile.  This can contain any reference\ninformation for humans you want associated with the profile.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this profile.  This should tell what\nthe profile is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "The name of the profile.  This must be unique across all\nprofiles.",
          "type": "string"
        },
        "Params": {
          "description": "Any additional parameters that may be needed to expand templates\nfor BootEnv, as documented by that boot environment's\nRequiredParams and OptionalParams.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Partial": {
          "description": "Partial tracks if the object is not complete when returned.",
          "type": "boolean",
          "readOnly": true
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Reservation": {
      "type": "object",
      "title": "Reservation tracks persistent DHCP IP address reservations.",
      "required": [
        "Addr",
        "Token",
        "Strategy",
        "Scoped"
      ],
      "properties": {
        "Addr": {
          "description": "Addr is the IP address permanently assigned to the strategy/token combination.",
          "type": "string",
          "format": "ipv4"
        },
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "A description of this Reservation.  This should tell what it is for,\nany special considerations that should be taken into account when\nusing it, etc.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this reservation.  This should tell what\nthe reservation is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Duration": {
          "description": "Duration is the time in seconds for which a lease can be valid.\nExpireTime is calculated from Duration.",
          "type": "integer",
          "format": "int32"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "NextServer": {
          "description": "NextServer is the address the server should contact next. You\nshould only set this if you want to talk to a DHCP or TFTP server\nother than the one provided by dr-provision.",
          "type": "string",
          "format": "ipv4"
        },
        "Options": {
          "description": "Options is the list of DHCP options that apply to this Reservation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DhcpOption"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Scoped": {
          "description": "Scoped indicates that this reservation is tied to a particular Subnet,\nas determined by the reservation's Addr.",
          "type": "boolean"
        },
        "Strategy": {
          "description": "Strategy is the leasing strategy that will be used determine what to use from\nthe DHCP packet to handle lease management.",
          "type": "string"
        },
        "Subnet": {
          "description": "Subnet is the name of the Subnet that this Reservation is associated with.\nThis property is read-only.",
          "type": "string"
        },
        "Token": {
          "description": "Token is the unique identifier that the strategy for this Reservation should use.",
          "type": "string"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Role": {
      "type": "object",
      "title": "Role is used to determine which operations on which API endpoints are permitted.",
      "required": [
        "Name"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Claims": {
          "description": "Claims that the role support.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Claim"
          }
        },
        "Description": {
          "description": "Description of role",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this role.  This should tell what\nthe role is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "Name is the name of the user",
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Section": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Sections": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Section"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Stage": {
      "description": "Stage encapsulates a set of tasks and profiles to apply\nto a Machine in a BootEnv.",
      "type": "object",
      "required": [
        "Name",
        "Templates",
        "RequiredParams",
        "BootEnv"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "BootEnv": {
          "description": "The BootEnv the machine should be in to run this stage.\nIf the machine is not in this bootenv, the bootenv of the\nmachine will be changed.",
          "type": "string"
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "A description of this stage.  This should tell what it is for,\nany special considerations that should be taken into account when\nusing it, etc.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this stage.  This should tell what\nthe stage is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "The name of the stage.",
          "type": "string"
        },
        "OptionalParams": {
          "description": "The list of extra optional parameters for this\nstage. They can be present as Machine.Params when\nthe stage is applied to the machine.  These are more\nother consumers of the stage to know what parameters\ncould additionally be applied to the stage by the\nrenderer based upon the Machine.Params",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Params": {
          "description": "Params contains parameters for the stage.\nThis allows the machine to access these values while in this stage.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Partial": {
          "description": "Partial tracks if the object is not complete when returned.",
          "type": "boolean",
          "readOnly": true
        },
        "Profiles": {
          "description": "The list of profiles a machine should use while in this stage.\nThese are used after machine profiles, but before global.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Reboot": {
          "description": "Flag to indicate if a node should be PXE booted on this\ntransition into this Stage.  The nextbootpxe and reboot\nmachine actions will be called if present and Reboot is true",
          "type": "boolean"
        },
        "RequiredParams": {
          "description": "The list of extra required parameters for this\nstage. They should be present as Machine.Params when\nthe stage is applied to the machine.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RunnerWait": {
          "description": "This flag is deprecated and will always be TRUE.",
          "type": "boolean"
        },
        "Tasks": {
          "description": "The list of initial machine tasks that the stage should run",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Templates": {
          "description": "The templates that should be expanded into files for the stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateInfo"
          }
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Stat": {
      "description": "Stat contains a basic statistic sbout dr-provision",
      "type": "object",
      "required": [
        "name",
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Subnet": {
      "type": "object",
      "title": "Subnet represents a DHCP Subnet.",
      "required": [
        "Name",
        "Enabled",
        "Proxy",
        "Unmanaged",
        "Subnet",
        "NextServer",
        "ActiveStart",
        "ActiveEnd",
        "ActiveLeaseTime",
        "ReservedLeaseTime",
        "OnlyReservations",
        "Strategy",
        "Pickers"
      ],
      "properties": {
        "ActiveEnd": {
          "description": "ActiveEnd is the last non-reserved IP address we will hand\nnon-reserved leases from.",
          "type": "string",
          "format": "ipv4"
        },
        "ActiveLeaseTime": {
          "description": "ActiveLeaseTime is the default lease duration in seconds\nwe will hand out to leases that do not have a reservation.",
          "type": "integer",
          "format": "int32"
        },
        "ActiveStart": {
          "description": "ActiveStart is the first non-reserved IP address we will hand\nnon-reserved leases from.",
          "type": "string",
          "format": "ipv4"
        },
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "A description of this Subnet.  This should tell what it is for,\nany special considerations that should be taken into account when\nusing it, etc.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this subnet.  This should tell what\nthe subnet is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Enabled": {
          "description": "Enabled indicates if the subnet should hand out leases or continue operating\nleases if already running.",
          "type": "boolean"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "Name is the name of the subnet.\nSubnet names must be unique",
          "type": "string"
        },
        "NextServer": {
          "description": "NextServer is the address of the next server in the DHCP/TFTP/PXE\nchain.  You should only set this if you want to transfer control\nto a different DHCP or TFTP server.",
          "type": "string",
          "format": "ipv4"
        },
        "OnlyReservations": {
          "description": "OnlyReservations indicates that we will only allow leases for which\nthere is a preexisting reservation.",
          "type": "boolean"
        },
        "Options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DhcpOption"
          }
        },
        "Pickers": {
          "description": "Pickers is list of methods that will allocate IP addresses.\nEach string must refer to a valid address picking strategy.  The current ones are:\n\n\"none\", which will refuse to hand out an address and refuse\nto try any remaining strategies.\n\n\"hint\", which will try to reuse the address that the DHCP\npacket is requesting, if it has one.  If the request does\nnot have a requested address, \"hint\" will fall through to\nthe next strategy. Otherwise, it will refuse to try any\nremaining strategies whether or not it can satisfy the\nrequest.  This should force the client to fall back to\nDHCPDISCOVER with no requsted IP address. \"hint\" will reuse\nexpired leases and unexpired leases that match on the\nrequested address, strategy, and token.\n\n\"nextFree\", which will try to create a Lease with the next\nfree address in the subnet active range.  It will fall\nthrough to the next strategy if it cannot find a free IP.\n\"nextFree\" only considers addresses that do not have a\nlease, whether or not the lease is expired.\n\n\"mostExpired\" will try to recycle the most expired lease in the subnet's active range.\n\nAll of the address allocation strategies do not consider\nany addresses that are reserved, as lease creation will be\nhandled by the reservation instead.\n\nWe will consider adding more address allocation strategies in the future.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Proxy": {
          "description": "Proxy indicates if the subnet should act as a proxy DHCP server.\nIf true, the subnet will not manage ip addresses but will send\noffers to requests.  It is an error for Proxy and Unmanaged to be\ntrue.",
          "type": "boolean"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "ReservedLeaseTime": {
          "description": "ReservedLeasTime is the default lease time we will hand out\nto leases created from a reservation in our subnet.",
          "type": "integer",
          "format": "int32"
        },
        "Strategy": {
          "description": "Strategy is the leasing strategy that will be used determine what to use from\nthe DHCP packet to handle lease management.",
          "type": "string"
        },
        "Subnet": {
          "description": "Subnet is the network address in CIDR form that all leases\nacquired in its range will use for options, lease times, and NextServer settings\nby default",
          "type": "string",
          "pattern": "^([0-9]+\\.){3}[0-9]+/[0-9]+$"
        },
        "Unmanaged": {
          "description": "Unmanaged indicates that dr-provision will never send\nboot-related options to machines that get leases from this\nsubnet.  If false, dr-provision will send whatever boot-related\noptions it would normally send.  It is an error for Unmanaged and\nProxy to both be true.",
          "type": "boolean"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Task": {
      "type": "object",
      "title": "Task is a thing that can run on a Machine.",
      "required": [
        "Name",
        "Templates",
        "RequiredParams",
        "OptionalParams"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "Description is a one-line description of this Task.",
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation should describe in detail what this task should do on a machine.",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "Name is the name of this Task.  Task names must be globally unique",
          "type": "string"
        },
        "OptionalParams": {
          "description": "OptionalParams are extra optional parameters that a template rendered for\nthe Task may use.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Prerequisites": {
          "description": "Prerequisites are tasks that must have been run in the current\nBootEnv before this task can be run.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "RequiredParams": {
          "description": "RequiredParams is the list of parameters that are required to be present on\nMachine.Params or in a profile attached to the machine.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Templates": {
          "description": "Templates lists the templates that need to be rendered for the Task.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateInfo"
          }
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Template": {
      "description": "Template represents a template that will be associated with a boot\nenvironment.",
      "type": "object",
      "required": [
        "ID",
        "Contents"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Contents": {
          "description": "Contents is the raw template.  It must be a valid template\naccording to text/template.",
          "type": "string"
        },
        "Description": {
          "description": "A description of this template",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ID": {
          "description": "ID is a unique identifier for this template.  It cannot change once it is set.",
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "TemplateInfo": {
      "description": "TemplateInfo holds information on the templates in the boot\nenvironment that will be expanded into files.",
      "type": "object",
      "required": [
        "Name",
        "Path"
      ],
      "properties": {
        "Contents": {
          "description": "The contents that should be used when this template needs\nto be expanded.  Either this or ID should be set.",
          "type": "string"
        },
        "ID": {
          "description": "The ID of the template that should be expanded.  Either\nthis or Contents should be set",
          "type": "string"
        },
        "Meta": {
          "description": "Metadata for the TemplateInfo.  This can be used by the job running\nsystem and the bootenvs to handle OS, arch, and firmware differences.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "description": "Name of the template",
          "type": "string"
        },
        "Path": {
          "description": "A text/template that specifies how to create\nthe final path the template should be\nwritten to.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Tenant": {
      "type": "object",
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "type": "string"
        },
        "Documentation": {
          "description": "Documentation of this tenant.  This should tell what\nthe tenant is for, any special considerations that\nshould be taken into account when using it, etc. in rich structured text (rst).",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Members": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "Name": {
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "UUID": {
      "description": "A UUID is a 128 bit (16 byte) Universal Unique IDentifier as defined in RFC\n4122.",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8"
      },
      "x-go-package": "github.com/digitalrebar/provision/vendor/github.com/pborman/uuid"
    },
    "User": {
      "description": "User is an API user of DigitalRebar Provision",
      "type": "object",
      "required": [
        "Name"
      ],
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "Description of user",
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "description": "Name is the name of the user",
          "type": "string"
        },
        "PasswordHash": {
          "description": "PasswordHash is the scrypt-hashed version of the user's Password.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Roles": {
          "description": "Roles is a list of Roles this User has.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Secret": {
          "description": "Token secret - this is used when generating user token's to\nallow for revocation by the grantor or the grantee.  Changing this\nwill invalidate all existing tokens that have this user as a user\nor a grantor.",
          "type": "string"
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "UserPassword": {
      "type": "object",
      "properties": {
        "Password": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "UserToken": {
      "description": "The Token section can be used for bearer authentication.",
      "type": "object",
      "title": "UserToken is an auth token for a specific User.",
      "properties": {
        "Info": {
          "$ref": "#/definitions/Info"
        },
        "Token": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    },
    "Workflow": {
      "description": "that machine's Tasks list is populated with the contents of the Stages in the Workflow.",
      "type": "object",
      "title": "Workflow contains a list of Stages. When it is applied to a Machine,",
      "properties": {
        "Available": {
          "description": "Available tracks whether or not the model passed validation.",
          "type": "boolean",
          "readOnly": true
        },
        "Bundle": {
          "description": "Bundle tracks the name of the store containing this object",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "type": "string"
        },
        "Documentation": {
          "type": "string"
        },
        "Endpoint": {
          "description": "Endpoint tracks the owner of the object amoung DRP endpoints",
          "type": "string",
          "readOnly": true
        },
        "Errors": {
          "description": "If there are any errors in the validation process, they will be\navailable here.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "ReadOnly": {
          "description": "ReadOnly tracks if the store for this object is read-only",
          "type": "boolean",
          "readOnly": true
        },
        "Stages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Validated": {
          "description": "Validated tracks whether or not the model has been validated.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/digitalrebar/provision/models"
    }
  },
  "responses": {
    "ActionPostResponse": {
      "description": "ActionPostResponse return on a successful POST of action",
      "schema": {
        "type": "object"
      }
    },
    "ActionResponse": {
      "description": "ActionResponse return on a successful GET of a single Action",
      "schema": {
        "$ref": "#/definitions/AvailableAction"
      }
    },
    "ActionsResponse": {
      "description": "ActionsResponse return on a successful GET of all Actions",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AvailableAction"
        }
      }
    },
    "BootEnvResponse": {
      "description": "BootEnvResponse returned on a successful GET, PUT, PATCH, or POST of a single bootenv",
      "schema": {
        "$ref": "#/definitions/BootEnv"
      }
    },
    "BootEnvsResponse": {
      "description": "BootEnvsResponse returned on a successful GET of all the bootenvs",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BootEnv"
        }
      }
    },
    "ContentResponse": {
      "description": "ContentsResponse returned on a successful GET of a contents",
      "schema": {
        "$ref": "#/definitions/Content"
      }
    },
    "ContentSummaryResponse": {
      "description": "ContentSummaryResponse returned on a successful Post of a content",
      "schema": {
        "$ref": "#/definitions/ContentSummary"
      }
    },
    "ContentsResponse": {
      "description": "ContentsResponse returned on a successful GET of all contents",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ContentSummary"
        }
      }
    },
    "ErrorResponse": {
      "description": "ErrorResponse is returned whenever an error occurs",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "FileInfoResponse": {
      "description": "FileInfoResponse returned on a successful upload of a file",
      "schema": {
        "$ref": "#/definitions/BlobInfo"
      }
    },
    "FileResponse": {
      "description": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nFileResponse returned on a successful GET of a file",
      "schema": {
        "type": "string",
        "format": "binary"
      }
    },
    "FilesResponse": {
      "description": "FilesResponse returned on a successful GET of files",
      "schema": {
        "$ref": "#/definitions/FilePaths"
      }
    },
    "IndexResponse": {
      "description": "IndexResponse lists all of the static indexes for a specific type of object",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/Index"
        }
      }
    },
    "IndexesResponse": {
      "description": "IndexesResponse lists all the static indexes for all the object types",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Index"
          }
        }
      }
    },
    "InfoResponse": {
      "description": "InfosResponse returned on a successful GET of an info",
      "schema": {
        "$ref": "#/definitions/Info"
      }
    },
    "InterfaceResponse": {
      "description": "InterfacesResponse returned on a successful GET of an interfaces",
      "schema": {
        "$ref": "#/definitions/Interface"
      }
    },
    "InterfacesResponse": {
      "description": "InterfacesResponse returned on a successful GET of all interfaces",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Interface"
        }
      }
    },
    "IsoInfoResponse": {
      "description": "IsoInfoResponse returned on a successful upload of an iso",
      "schema": {
        "$ref": "#/definitions/BlobInfo"
      }
    },
    "IsoResponse": {
      "description": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nIsoResponse returned on a successful GET of an iso",
      "schema": {
        "type": "object"
      }
    },
    "IsosResponse": {
      "description": "IsosResponse returned on a successful GET of isos",
      "schema": {
        "$ref": "#/definitions/IsoPaths"
      }
    },
    "JobActionsResponse": {
      "description": "JobActionsResponse return on a successful GET of a Job's actions",
      "schema": {
        "$ref": "#/definitions/JobActions"
      }
    },
    "JobLogResponse": {
      "description": "This is a HACK - I can't figure out how to get\nswagger to render this a binary.  So we lie.\nWe also override this object from the server\ndirectory to have a binary format which\nturns it into a stream.\n\nJobLogResponse returned on a successful GET of a log",
      "schema": {
        "type": "string",
        "format": "binary"
      }
    },
    "JobParamsResponse": {
      "description": "JobParamsResponse return on a successful GET of all Job's Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "JobResponse": {
      "description": "JobResponse return on a successful GET, PUT, PATCH or POST of a single Job",
      "schema": {
        "$ref": "#/definitions/Job"
      }
    },
    "JobsResponse": {
      "description": "JobsResponse return on a successful GET of all Jobs",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Job"
        }
      }
    },
    "LeaseResponse": {
      "description": "LeaseResponse returned on a successful GET, PUT, PATCH, or POST of a single lease",
      "schema": {
        "$ref": "#/definitions/Lease"
      }
    },
    "LeasesResponse": {
      "description": "LeasesResponse returned on a successful GET of all the leases",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Lease"
        }
      }
    },
    "LogResponse": {
      "description": "LogResponse is returned in response to a log dump request.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Line"
        }
      }
    },
    "MachineParamResponse": {
      "description": "MachineParamResponse return on a successful GET of a single Machine param",
      "schema": {
        "type": "object"
      }
    },
    "MachineParamsResponse": {
      "description": "MachineParamsResponse return on a successful GET of all Machine's Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "MachineResponse": {
      "description": "MachineResponse return on a successful GET, PUT, PATCH or POST of a single Machine",
      "schema": {
        "$ref": "#/definitions/Machine"
      }
    },
    "MachinesResponse": {
      "description": "MachinesResponse return on a successful GET of all Machines",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Machine"
        }
      }
    },
    "NoContentResponse": {
      "description": "NoContentResponse is returned for deletes and auth errors"
    },
    "ObjectsResponse": {
      "description": "ObjectsResponse returned on a successful GET of objects",
      "schema": {
        "$ref": "#/definitions/ObjectPrefixes"
      }
    },
    "ParamParamsResponse": {
      "description": "ParamParamsResponse return on a successful GET of all Param's Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "ParamResponse": {
      "description": "ParamResponse returned on a successful GET, PUT, PATCH, or POST of a single param",
      "schema": {
        "$ref": "#/definitions/Param"
      }
    },
    "ParamsResponse": {
      "description": "ParamsResponse returned on a successful GET of all the params",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Param"
        }
      }
    },
    "PluginParamResponse": {
      "description": "PluginParamResponse return on a successful GET of one Plugin's Param",
      "schema": {
        "type": "object"
      }
    },
    "PluginParamsResponse": {
      "description": "PluginParamsResponse return on a successful GET of all Plugin's Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "PluginProviderInfoResponse": {
      "description": "PluginProviderInfoResponse returned on a successful upload of an iso",
      "schema": {
        "$ref": "#/definitions/PluginProviderUploadInfo"
      }
    },
    "PluginProviderResponse": {
      "description": "PluginProvidersResponse returned on a successful GET of an plugin_provider",
      "schema": {
        "$ref": "#/definitions/PluginProvider"
      }
    },
    "PluginProvidersResponse": {
      "description": "PluginProvidersResponse returned on a successful GET of all plugin_provider",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PluginProvider"
        }
      }
    },
    "PluginResponse": {
      "description": "PluginResponse return on a successful GET, PUT, PATCH or POST of a single Plugin",
      "schema": {
        "$ref": "#/definitions/Plugin"
      }
    },
    "PluginsResponse": {
      "description": "PluginsResponse return on a successful GET of all Plugins",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Plugin"
        }
      }
    },
    "PrefsResponse": {
      "description": "PrefsResponse returned on a successful GET of all preferences",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "ProfileParamResponse": {
      "description": "ProfileParamResponse return on a successful GET of a single Param for a Profile",
      "schema": {
        "type": "object"
      }
    },
    "ProfileParamsResponse": {
      "description": "ProfileParamsResponse return on a successful GET of all Profile's Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "ProfileResponse": {
      "description": "ProfileResponse returned on a successful GET, PUT, PATCH, or POST of a single profile",
      "schema": {
        "$ref": "#/definitions/Profile"
      }
    },
    "ProfilesResponse": {
      "description": "ProfilesResponse returned on a successful GET of all the profiles",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Profile"
        }
      }
    },
    "PubKeyResponse": {
      "description": "PubKeyResponse is returned on a successful GET of a Paramer public key for secure params."
    },
    "ReservationResponse": {
      "description": "ReservationResponse returned on a successful GET, PUT, PATCH, or POST of a single reservation",
      "schema": {
        "$ref": "#/definitions/Reservation"
      }
    },
    "ReservationsResponse": {
      "description": "ReservationsResponse returned on a successful GET of all the reservations",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Reservation"
        }
      }
    },
    "RoleResponse": {
      "description": "RoleResponse returned on a successful GET, PUT, PATCH, or POST of a single role",
      "schema": {
        "$ref": "#/definitions/Role"
      }
    },
    "RolesResponse": {
      "description": "RolesResponse returned on a successful GET of all the roles",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Role"
        }
      }
    },
    "SingleIndexResponse": {
      "description": "SingleIndexResponse tests to see if a single specific index exists.\nUnlike the other index API endpoints, you can probe for dynamic indexes\nthis way.",
      "schema": {
        "$ref": "#/definitions/Index"
      }
    },
    "StageParamResponse": {
      "description": "StageParamResponse return on a successful GET of a single Stage param",
      "schema": {
        "type": "object"
      }
    },
    "StageParamsResponse": {
      "description": "StageParamsResponse return on a successful GET of all Stage' Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "StageResponse": {
      "description": "StageResponse returned on a successful GET, PUT, PATCH, or POST of a single stage",
      "schema": {
        "$ref": "#/definitions/Stage"
      }
    },
    "StagesResponse": {
      "description": "StagesResponse returned on a successful GET of all the stages",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Stage"
        }
      }
    },
    "SubnetResponse": {
      "description": "SubnetResponse returned on a successful GET, PUT, PATCH, or POST of a single subnet",
      "schema": {
        "$ref": "#/definitions/Subnet"
      }
    },
    "SubnetsResponse": {
      "description": "SubnetsResponse returned on a successful GET of all the subnets",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Subnet"
        }
      }
    },
    "TaskParamsResponse": {
      "description": "TaskParamsResponse return on a successful GET of all Task's Params",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "TaskResponse": {
      "description": "TaskResponse return on a successful GET, PUT, PATCH or POST of a single Task",
      "schema": {
        "$ref": "#/definitions/Task"
      }
    },
    "TasksResponse": {
      "description": "TasksResponse return on a successful GET of all Tasks",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Task"
        }
      }
    },
    "TemplateResponse": {
      "description": "TemplateResponse return on a successful GET, PUT, PATCH or POST of a single Template",
      "schema": {
        "$ref": "#/definitions/Template"
      }
    },
    "TemplatesResponse": {
      "description": "TemplatesResponse return on a successful GET of all templates",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Template"
        }
      }
    },
    "TenantResponse": {
      "description": "TenantResponse returned on a successful GET, PUT, PATCH, or POST of a single tenant",
      "schema": {
        "$ref": "#/definitions/Tenant"
      }
    },
    "TenantsResponse": {
      "description": "TenantsResponse returned on a successful GET of all the tenants",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Tenant"
        }
      }
    },
    "UserResponse": {
      "description": "UserResponse returned on a successful GET, PUT, PATCH, or POST of a single user",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "UserTokenResponse": {
      "description": "UserTokenResponse returned on a successful GET of user token",
      "schema": {
        "$ref": "#/definitions/UserToken"
      }
    },
    "UsersResponse": {
      "description": "UsersResponse returned on a successful GET of all the users",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "WorkflowResponse": {
      "description": "WorkflowResponse returned on a successful GET, PUT, PATCH, or POST of a single workflow",
      "schema": {
        "$ref": "#/definitions/Workflow"
      }
    },
    "WorkflowsResponse": {
      "description": "WorkflowsResponse returned on a successful GET of all the workflows",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Workflow"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": [
        "[]"
      ]
    },
    {
      "Bearer": [
        "[]"
      ]
    }
  ],
  "tags": [
    {
      "name": "BootEnvs"
    },
    {
      "name": "Templates"
    },
    {
      "name": "Files"
    },
    {
      "name": "Interfaces"
    },
    {
      "name": "Isos"
    },
    {
      "name": "Subnets"
    },
    {
      "name": "Reservations"
    },
    {
      "name": "Prefs"
    },
    {
      "name": "Leases"
    },
    {
      "name": "Machines"
    },
    {
      "name": "Profiles"
    },
    {
      "name": "Users"
    },
    {
      "name": "Roles"
    },
    {
      "name": "Tenants"
    },
    {
      "name": "Params"
    },
    {
      "name": "Tasks"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Logs"
    },
    {
      "name": "Plugins"
    },
    {
      "name": "PluginProviders"
    },
    {
      "name": "Indexes"
    },
    {
      "name": "Contents"
    },
    {
      "name": "Events"
    },
    {
      "name": "Info"
    },
    {
      "name": "Stages"
    },
    {
      "name": "System"
    },
    {
      "name": "Workflows"
    },
    {
      "name": "Meta"
    },
    {
      "name": "Objects"
    }
  ]
}